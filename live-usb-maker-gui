#!/bin/bash

##Original Code by dolphin_oracle and BitJam November 15 2016 (dolphinoracle@gmail.com)
##License is GPL 3.0
##originally developed for antiX and mx linux.

##depends on live-usb-maker, cli-shell-utils and yad

#add BitJam's soure cli-shell-utils
source /usr/local/lib/cli-shell-utils/cli-shell-utils.bash

#translations/locale stuff
TEXTDOMAINDIR=/usr/share/locale 
export TEXTDOMAIN="cli-shell-utils"

WORK_DIR=/run/$ME
FIFO=$WORK_DIR/fifo

CLI_PROG="live-usb-maker"

LOCK_FILE="/run/lock/$CLI_PROG"
ERR_FILE="/var/log/$CLI_PROG.error"
PROG_FILE="/var/log/$CLI_PROG.progress"

USER_STOP=false

TITLE=$"Live-USB Maker GUI"
CHOOSE_MODE_TITLE=$"Live System Detected.  Select Live-USB creation mode"
CHOOSE_MODE=$"Select Mode"
CHOOSE_USB=$"Select USB Device"
CHOOSE_CLONE=$"Clone Mode"
CHOOSE_ISO=$"Select ISO"
CLONE_RUNNING_SYSTEM=$"Clone Running Live System"
INFO=$"Information"
BAD_SOURCE=$"Source is not an ISO file.  Please choose another file."
DESCRIPTION=$"Simple GUI for Live-USB Maker"
VERSION=$"Version"
USB_CHECK=$"No target USB device detected.  Please insert a device and try again"
LICENSE=$"License"
APPLY=$"Apply"
CLOSE=$"Close"
ABOUT=$"About"
HELP=$"Help"
ADVANCE=$"Advanced"
COMPLETE=$"LiveUSB creation succesful!"
STOP_MESSAGE=$"Operation stopped by user."
MSG_LUM_LOCK_EXISTS=$"A %s process is already running with PID %s \n Please close that process before starting a new one"
MSG_OTHER_LOCK_ERROR=$"Failed to obtain lock on %s"
PROGRESS_CLOSED=$"Progress window closed, but job not done. Do you want to keep going?"
YES=$"Yes"
NO=$"No"

PRETEND=$1
echo "Pretend Mode = " $PRETEND
if [ "$PRETEND" = "-p" ]; then
    echo "Pretend Mode Enabled"
fi 


##-----------------------------------------------------

main() {
    echo "creating lock ..."
    trap clean_up EXIT
    check_flock
    gui_flock $LOCK_FILE
    mkdir -p $WORK_DIR

    mkfifo $FIFO
    exec 10<> $FIFO
    truncate -s0 $PROG_FILE

    MODE=2
    status=0
    ##start gui and run actions
    ##user that launched the app
    launch_user=$(ps -aux |grep -m 1 su-to-root |awk '{print $1}')
    echo "launch user is " $launch_user

    #offer clone mode if running live
    check_clone_mode

    while [ "$status" = "0" ]; do
        display_selections
        actions
        status=$actionstatus
    
    done
    clean_up
}

#define functions

check_clone_mode() {
    LIVE_CHECK=$(df -T / |tail -n1 |awk '{print $2}')
    echo "live check = " $LIVE_CHECK
    if [ "$LIVE_CHECK" = "overlay" ] || [ "$LIVE_CHECK" = "aufs" ]; then

        MODE_SELECTION=$(yad --window-icon=drive-removable-media-usb --form --num-output --button=$APPLY!emblem-default!:0 --button=$CLOSE!gtk-close!:1 --title="$TITLE" \
            --field="<b>$CHOOSE_MODE_TITLE</b>":LBL ""\
            --field="":CB "$CLONE_RUNNING_SYSTEM!$CHOOSE_ISO"\
            --field="":LBL "")

        case $? in
            0)     MODE=$(echo $MODE_SELECTION|cut -d "|" -f2)
                   echo "Mode is " $MODE ;;

            1)     exit 0    ;;

	  252)     exit 0    ;;
        esac
    fi
}


display_selections() {

    build_usb_list

    # get user selections with above for defaults
    #display selection dialog

    case $MODE in

        1) selections=$(yad --window-icon=drive-removable-media-usb --form --button=$ABOUT!help-about!:3 --button=$HELP!help-contents!:4 --button=$APPLY!emblem-default!:0 --button=$CLOSE!gtk-close!:1 --width=300 --title="$TITLE" \
            --field="<b>Clone Mode</b>":LBL ""\
            --field="$CHOOSE_USB":CB "$usb_list"\
            --field="$CHOOSE_CLONE":CB "clone"\
            --field="":LBL "") ;;

        2) selections=$(yad --window-icon=drive-removable-media-usb --form --button=$ABOUT!help-about!:3 --button=$HELP!help-contents!:4 --button=$APPLY!emblem-default!:0 --button=$CLOSE!gtk-close!:1 --width=300 --title="$TITLE" \
            --field="<b>$TITLE</b>":LBL ""\
            --field="$CHOOSE_USB":CB "$usb_list"\
            --field="$CHOOSE_ISO":FL "none" \
            --field="":LBL "") ;;
    esac
}


actions() {
    status2=$?

    case $status2 in

        0) adjust_settings ;;
        1) quit            ;;
        3) display_about   ;;
        4) display_help    ;;
        5) display_license ;;
	252)     quit    ;;
    esac
}

adjust_settings() {

    echo $selections

    usb_device=$(echo $selections|cut -d "|" -f2|cut -d " " -f1)
    source=$(echo $selections|cut -d "|" -f3)
    source=$(readlink -f "$source")

    echo "usb_device is " $usb_device
    echo "source is " $source

    #check to make sure source is a iso

    if [ $MODE = 2 ]; then
        if [ "$(file "$source" |grep -i -q iso && echo $?)" = "0" ]; then
            echo "is a iso file"
            is_a_iso=true
        else
            echo "not an iso file"
            is_a_iso=false
            yad --form --title=$TITLE --button=gtk-ok --text="$BAD_SOURCE" --buttons-layout=center
        fi
    fi

    case $MODE in

        1) source="clone"
	   make_live_usb
           error_notification
            ;;
            
        2)  if [ $is_a_iso = true ]; then
                make_live_usb
                error_notification
            else
                actionstatus=0
            fi ;;
    esac
}


display_about() {

    info=$(yad --selectable-labels --window-icon=drive-removable-media-usb --align=center --form --button=$LICENSE:5 --button=OK:0 --width=300 --title="About Live-USB Maker GUI"\
        --field="<b>$TITLE</b>":LBL ""\
        --field=" ":LBL " "\
        --field="$VERSION 16.11":LBL ""\
        --field=" ":LBL " "\
        --field="<b>$DESCRIPTION</b>":LBL ""\
        --field=" ":LBL " "\
        --field="http://mepis.antix.org":BTN "su $launch_user -c 'xdg-open http://antix.mepis.org'"\
        --field="http://mxlinux.org":BTN "su $launch_user -c 'xdg-open https://mxlinux.org'"\
        --field=" ":LBL " "\
        --field="copyright (c) antiX":LBL "")

    case $? in

        0) actionstatus=0  ;;
        5) display_license ;;
    esac
}    
    
display_help() {
    su $launch_user -c "xdg-open https://mxlinux.org/wiki/help-files/help-live-usb-maker &"
    actionstatus=0
}

display_license() {
    su $launch_user -c "xdg-open https://mxlinux.org/wiki/licenses/license-live-usb-maker &"
    display_about
}

quit() {
    echo quit
    actionstatus=1
}

build_usb_list() {
    #Check if running live
    Live_device=$(get_live_dev)
    Live_device=$(printf '%s\n' "${Live_device//[[:digit:]]/}")
    echo  "Live Device is " $Live_device
    unset usb_list
    #build list for usb_device selection box
    for i in $( find  /dev/ -name sd? |cut -d '/' -f3); do
        test=$(udevadm info --query=property --path=/sys/block/$i | grep ID_BUS=usb)
        if [ "$i" != "$Live_device" ]; then
            if [ "$test" = "ID_BUS=usb" ]; then
                vendor=$(udevadm info --query=property --path=/sys/block/$i |grep ID_VENDOR= |cut -d '=' -f2)
                model=$(udevadm info --query=property --path=/sys/block/$i |grep ID_MODEL= |cut -d '=' -f2)
                echo $i $vendor $model
                if [ "$i" != "" ]; then
                    usb_list="$i $vendor $model!"$usb_list
                fi
            fi
        fi
    done

    if [ "$usb_device" != "" ]; then
        usb_list=$usb_device!$usb_list
    fi

    if [ "$usb_list" = "" ]; then
        yad --form --title="$TITLE" --button=gtk-ok --text="$USB_CHECK" --buttons-layout=center
        exit 0
    fi

    echo "usb_list is " $usb_list
    echo ""
}

error() {
    echo "Error: $*" >&2
    exit 3
}

clean_up() 
{
    test -e $FIFO     && rm -f $FIFO
    test -d $WORK_DIR && rmdir $WORK_DIR
    unflock $LOCK_FILE
}

error_notification()
{

if [ $USER_STOP = true ]; then
    yad --window-icon=drive-removable-media-usb --width=300 --align=center --form --title="$TITLE" --button=gtk-ok --buttons-layout=center --field="<b>$STOP_MESSAGE</b>":LBL ""
    actionstatus=1
fi

if [ $USER_STOP = false ]; then    
    if test -f $ERR_FILE; then 
        echo "cli code had a fatal error"
        MESSAGE="$(cat $ERR_FILE)"
        yad --window-icon=drive-removable-media-usb --width=300 --form --title="$TITLE" --button=gtk-ok --text="$MESSAGE" --buttons-layout=center
        actionstatus=0
    else
        echo "cli code ran without error"
        yad --window-icon=drive-removable-media-usb --width=300 --align=center --form --title="$TITLE" --button=gtk-ok --buttons-layout=center --field="<b>$COMPLETE</b>":LBL ""
        actionstatus=1
    fi
fi
}

make_live_usb()
{
local lum_pid yad_pid tail_pid

    while true; do

        yad --window-icon=drive-removable-media-usb --text-info --button=$CLOSE!gtk-close!:1 --width=880 --height=350 --tail --center <&10 &
        yad_pid=$!

        tail -n20  -f --pid=$yad_pid $PROG_FILE >&10 &
	
        if [ -z "$lum_pid" ]; then 
            $CLI_PROG gui $PRETEND --force=flock --from="$source" -t /dev/$usb_device 2>/dev/null &
            lum_pid=$!
	    echo "LUM PID IS " $lum_pid
        fi

        while true; do
            sleep 0.1
            test -d /proc/$yad_pid && test -d /proc/$lum_pid && continue
            break
        done

        # Suspend lum
        test -d /proc/$lum_pid && kill -STOP $lum_pid

        sleep .1

        test -d /proc/$yad_pid || echo "yad exited"
        test -d /proc/$lum_pid || echo "lum exited"

        if test -d /proc/$lum_pid; then
           yad --window-icon=drive-removable-media-usb --width=300 --align=center --form --title="$TITLE" --button="$NO"!gtk-close!:1 --button="$YES"!gtk-ok!:0 --buttons-layout=center --field="$PROGRESS_CLOSED":LBL ""
#	   YES_no "Do you want to keep going?" || break
           case $? in

                0) echo "Keep Going" ;;
                1) USER_STOP=true && break ;;

           esac
           sleep .1    
           kill -CONT $lum_pid
           continue
        else
           break
        fi
    done
    kill -CONT $lum_pid
    #echo -n "Press <Enter> to continue ... "
    #read x
    echo "killing yad and lum as needed  ..."
    # I don't know why I no longer get the Terminate message
    kill_pids $yad_pid $lum_pid
}

kill_pids() {
    local pid
    for pid; do
        test -z $pid && continue
        disown  $pid 2>/dev/null
        pkill --parent $pid 
        kill    $pid 2>/dev/null
    done
}

check_flock()
{

if [ -e $LOCK_FILE ]; then
    local flck_pid
    flck_pid=$(flock_pid)
    echo $flck_pid
    if [ ${#flck_pid} -gt 0 ]; then
        msg=$(printf "$MSG_LUM_LOCK_EXISTS" live-usb-maker $flck_pid)
    else
        msg=$(printf "MSG_OTHER_LOCK_ERROR" $LOCK_FILE)
    fi
    yad_error "$msg"
fi

}

yad_error()
{

local error_message=$1
yad --window-icon=drive-removable-media-usb --width=300 --align=center --form --title="$TITLE" --button=gtk-ok --buttons-layout=center --field="<b>$error_message</b>":LBL ""
    exit 0
}

#launch gui

main "$@"

